#!/usr/bin/env node

const { Command } = require('commander')
const ethers = require('ethers')
const uniq = require('lodash.uniq')
const chunk = require('lodash.chunk')

const program = new Command()
program.description('Find tetuBAL snapshot block')
program.requiredOption('-s, --startBlock <block>')
program.requiredOption('-e, --endBlock <block>')
program.parse()

const BALANCER_VAULT = '0xBA12222222228d8Ba445958a75a0704d566BF2C8'
const TETU_BAL_BPT_ID = '0xb797adfb7b268faeaa90cadbfed464c76ee599cd0002000000000000000005ba'
// const TETU_BAL = '0x7fC9E0Aa043787BFad28e29632AdA302C790Ce33'

async function main () {
  const provider = new ethers.providers.JsonRpcProvider(process.env.POLYGON_ARCHIVE_RPC_HTTP)
  const startBlock = parseInt(program.opts().startBlock, 10)
  const endBlock = parseInt(program.opts().endBlock, 10)

  const balVault = new ethers.Contract(
    BALANCER_VAULT,
    require('./abis/Balancer.json'),
    provider
  )

  const events = await balVault.queryFilter(
    balVault.filters.PoolBalanceChanged(TETU_BAL_BPT_ID),
    startBlock,
    endBlock
  )

  const filteredEvents = []

  // ignore join/exit of less than 1 tetuBAL or BPT
  for (const e of events) {
    for (const d of e.args.deltas) {
      if (d.gt(ethers.utils.parseEther('1'))) {
        filteredEvents.push(e)
      }
    }
  }

  const blockChoices = uniq([
    startBlock,
    ...(filteredEvents.map(e => e.blockNumber)),
    endBlock
  ])

  console.log(`Looking up balances for ${blockChoices.length} blocks, from ${startBlock} to ${endBlock}...`)

  const chunks = chunk(blockChoices, 10)
  let highestAmount = ethers.BigNumber.from(0)
  let bestBlock

  for (const i in chunks) {
    console.log(`getting chunk ${parseInt(i, 10) + 1} of ${chunks.length}`)

    await Promise.all(chunks[i].map(async function (blockNumber) {
      const res = await balVault.getPoolTokens(TETU_BAL_BPT_ID, { blockTag: blockNumber })
      if (res.balances[1].gt(highestAmount)) {
        highestAmount = res.balances[1]
        bestBlock = blockNumber
      }
    }))
  }

  console.log('Best block:', {
    amountTetuBAL: highestAmount.toString(),
    blockNumber: bestBlock
  })
}

main()
