#!/usr/bin/env node

const axios = require('axios')
const snapshot = require('@snapshot-labs/snapshot.js')
const client = new snapshot.Client712('https://hub.snapshot.org')
const ethers = require('ethers')
const compact = require('lodash.compact')
const { Command } = require('commander')
const delay = require('delay')

const program = new Command()
program.description('Create tetubal gauge proposal')
program.option('-d, --dry')
program.parse()

const POLYGON_SNAPSHOT_BLOCK_NUMBER = 41705797
const START_UNIX = Math.floor((new Date('Apr 27 2023 19:00:00 UTC')).getTime() / 1000)
const END_UNIX = Math.floor((new Date('May 2 2023 03:00:00 UTC')).getTime() / 1000)

const TITLE = 'BRV-019: Gauge Weight for Week of 27th April 2023'

const BODY = `
The results of this vote be submitted to Balancer and will last for 2 weeks.

TetuBAL docs: https://docs.tetu.io/tetu-io/protocol/products#tetubal
TetuBAL: https://app.tetu.io/tetubal
`.trim()

async function getGaugeChoices () {
  const resp = await axios.get('https://raw.githubusercontent.com/balancer/frontend-v2/develop/src/data/voting-gauges.json')
  return compact(resp.data.map(gaugeDetailsToChoice)).sort()
}

function gaugeDetailsToChoice (d) {
  if (d.isKilled) return

  const truncatedAddr = d.address.substring(0, 8)

  // max length: 32 chars
  return `${d.pool.symbol.trim().substring(0, 23)} (${truncatedAddr})`
}

async function main () {
  const choices = await getGaugeChoices()

  // always include tetu gauges first
  choices.sort((a, b) => {
    if (a.toLowerCase().includes('tetu')) return -1
    return 1
  })

  try {
    const proposal = {
      space: 'tetubal.eth',
      type: 'weighted',
      title: TITLE,
      body: BODY,
      choices,
      start: START_UNIX,
      end: END_UNIX,
      snapshot: POLYGON_SNAPSHOT_BLOCK_NUMBER,
      plugins: '{}',
      app: 'snapshot',
      discussion: ''
    }

    if (program.opts().dry) {
      console.log('Dry run, proposal below...')
      console.log(proposal)
    } else {
      if (!process.env.DEPLOYER_MNEMONIC) throw new Error('must set DEPLOYER_MNEMONIC')
      const signer = ethers.Wallet.fromMnemonic(process.env.DEPLOYER_MNEMONIC, process.env.DEPLOYER_MNEMONIC_PATH || "m/44'/60'/0'/0/0")
      proposal.from = signer.address

      console.log(proposal)
      console.log('About to create proposal in 5 seconds...')
      await delay(5000)
      const resp = await client.proposal(signer, signer.address, proposal)
      console.log(resp)
    }
  } catch (err) {
    console.log(err)
  }
}

main()
